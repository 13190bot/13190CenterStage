// Generated by Recorder.java
package org.firstinspires.ftc.teamcode.TeleOp.MainTeleop;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.VoltageSensor;
import org.checkerframework.checker.units.qual.A;
import org.firstinspires.ftc.robotcore.external.Telemetry;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.function.BooleanSupplier;
import java.util.stream.Collectors;

@Autonomous(group="Recorder", name="Replayer")
public class Replayer extends LinearOpMode {
    @Override
    public void runOpMode() throws InterruptedException {
        double replayingStartTime = System.nanoTime();
        int i = 0;
        // Busy looping for each ms (assuming replay loop time is less than recording loop time)
        int length = data[0].size();
        while (replaying.getAsBoolean()) {
            while ((long) data[0].get(i) > System.nanoTime() - replayingStartTime) {
                // Busy loop
            }


            // Motors

            // If needed for (more) accuracy, factor in voltage difference (UNTESTED)
//            double startVoltage = voltageSensor.getVoltage();
//            double powerMultiplier = (double) data[1].get(i) / startVoltage; // assumes linear model
//            for (int i2 = 0; i2 < motors.size(); i2++) {
//                motors.get(i2).setPower((double) data[i2 + 2].get(i) * powerMultiplier);
//
//                telemetry.addData("a", (double) data[i2 + 2].get(i) * powerMultiplier);
//            }

            // Don't factor in voltage (TESTED)
            for (int i2 = 0; i2 < motors.size(); i2++) {
                motors.get(i2).setPower((double) data[i2 + 2].get(i));
            }

            // Servos
            for (int i2 = 0; i2 < servos.size(); i2++) {
                servos.get(i2).setPosition((double) data[i2 + motors.size() + 2].get(i));
            }

            // Other code
            // Stop replaying
//            if (gamepad1.b) {
//                break;
//            }

            i = i + 1;
            if (i == length) {
                break;
            }



            // telemetry shit
//            telemetry.addData("REPLAYING", i + "/" + length);
//            telemetry.update();
        }
    }
}
